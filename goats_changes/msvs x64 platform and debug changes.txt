Adding the x64 platforms:

Most of the work was adding the custom build steps for the asm variants of a few cryptopp symbols only meant for x64. The rest was pointing the linker to
the right folders. Make sure you have a x64 install of python will all the needed packages. I put mine in C:\Python27_64\ so all project paths redirect
to this folder in x64. In debug mode, guardian is still built as release.

I didn't change the DebugDll and ReleaseDll configurations. Don't know what these are for. So pick between Release and Debug only.


breakpoints in debug mode:

1) Pick a debug configuration (32 or 64) and build it. Make sure you link your python libs folder. MSVS will eventually complain about the missing 
2) In your python libs folder, copy a new instance of python<xx>.lib (xx is the version, either 26 or 27) and rename it python<xx>_d.lib
3) open pyconfig.h in the python include folder. Around line 370, you'll find these 3 lines:

#ifdef _DEBUG
#	define Py_DEBUG
#endif

comment then out.

4) At this point your dll should build in debug mode. To catch breakpoints set in it you to have invoke the python script loading your dll from MSVS.
For that purpose, go to the BitcoinArmory_SwigDLL project properties. In the page at Configuration Properties/Debugging, set the following lines:

		Command: set your python.exe full path. I tried the plain registered env path but it wouldn't resolve it for some reason
		I set C:\Python27\python.exe for the 32 bit version and C:\Python27_64\python.exe for the x64 one. Change to whereever your python.exe
		for the right platform is.

		Command Arguments: path to the ArmoryQt.py, currently set at ..\..\ArmoryQt.py

5) NOTE: The _CppBlockUtils.pyd dll depends on pthreadVC2.dll to load properly. This means pthreadVC2.dll HAS to be in the same folder as 
_CppBlockUtils.pyd and it has to be of the right architecture or it'll all fail.

With all this done, select BitcoinArmory_SwigDLL as your start up project (right click the project and pick "Set as StartUp Project"). If the project 
is already bold, it means it is already set. At this point, press F5 to start debugging. Further F5 will resume the code once you've hit a breakpoint.
Shift+F5 stops the debugging.

		